Retirado de: Ruby on Rails Tutorial - Learn Rails by Example

rails new demo_app
cd demo_app

vi Gemfile  >>>>>
gem 'rails', '3.0.9'
gem 'sqlite3', '1.3.3'
<<<<<
bundle install

git init
git add .
git commit -m "Initial commit"

GitHub  >>>>>
Criei um novo repositório.
<<<<<
git config --global user.name "Fabio Lima"
git config --global user.mail fabionl@gmail.com
touch README 
git remote add origin git@github.com:fabionl/demo_app.git
git push -u origin master
>>>>>>>>
No meu caso deu problema e tive de seguir a orientação no github para configurar o ssh.
<<<<<<<<<

rails generate scaffold User name:string email:string
bundle exec rake db:migrate    >>>>>>
Testei a versão rake utilizado pelo bundle e o padrao do sistema e eram iguais.
a partir de agora, passo a usar o rake diretamente.
<<<<<
rails s
Browser: localhost:3000  >>>>>>
Abriu a página inicial do Rails.
<<<<<<<
rake -T db    >>>>>
Comando do db disponíveis.
<<<<<
rake -T    >>>>>>
Comandos disponíveis.
<<<<<

>>>>>>>
Criei alguns users.
<<<<<<<

rails generate scaffold Micropost content:string user_id:integer
rake db:migrate

>>>>>>>
Fazendo as alterações aos models.
<<<<<<<

git add .
git commit -a -m "Done with the demo app"
git push



****************************************************************************
****************************************************************************
****************************************************************************

*****===> 2011/08/02

rails new sample_app -T       >>>>>>>>  -T serve para não gerar o test directory
cd sample_app

vi Gemfile     >>>>>>>>
gem 'sqlite3', '1.3.3'

group :development do
  gem 'rspec-rails', '2.6.1'
end

group :test do
  gem 'rspec-rails', '2.6.1'
  gem 'webrat', '0.7.1'
end
<<<<<<<<<
bundle install
rails generate rspec:install

git init
git add .
git commit -m "Initial commit"

vi README   >>>>>>>>>>
    Substituição do Texto para uma descrição do Aplicativo, usando markdown.
<<<<<<<<
git mv README README.markdown
git commit -a -m "Improved the README"

git remote add origin git@github.com:fabionl/sample_app.git
git push origin master

git checkout -b static-pages    >>>>>> Criando um novo Topic Branch. A partir daqui o git tá focando nesse Topic Branch

rails generate controller Pages home contact
browser localhost:3000/pages/home    >>>>>>>>>
Apresentou uma página "place holder" da view.
<<<<<<<<<

git add .
git commit -m "Added a Pages controller"



*****===> 2011/08/03

vi Gemfile  >>>>>>>> Tentando autotest.
group :development, :test do
  gem 'autotest', '>= 4.4.6'
  gem 'autotest-rails-pure', '>= 4.1.2'
end
<<<<<<<<<<<<<
bundle install

vi Gemfile  >>>>>>>> Tentando autotest.
group :development, :test do
  # Especifico para o MacOSX
  gem 'autotest-fsevent', '>= 0.2.4'
  gem 'autotest-growl', '>= 0.2.9'
end
<<<<<<<<<<<<<
bundle install

vi .autotest     >>>>>>>>
require 'autotest-growl'
require 'autotest-fsevent'
<<<<<<<<<
git rm -r spec/views
git rm -r spec/helpers

rspec spec/     >>>>>  Executando os testes:
Pode-se usar outras opções:
rspec spec/controllers
rspec spec/controllers/pages_controller_spec.rb
<<<<<
autotest >>>>>>>>>>>>
No meu caso, deu uma mensagem de erro.
Rodei:
gem update --system

Isso resolveu o problema.
<<<<<<<<<<<<

vi Gemfile    >>>>>>>>  Instalando o Spork agora (aumentando velocidade dos testes)
group :test do
  gem 'spork', '>= 0.9.0.rc8'
end
<<<<<<<<
bundle exec spork --bootstrap
vi spec/spec_helper.rb    >>>>>>>>>>
Copiei todo o conteúdo do final do arquivo para dentro de:
Spork.prefork
<<<<<<<<<

time rspec spec/         >>>>>>>
Medidas de Tempo sem o Spork
<<<<<<
bundle exec spork
time rspec --drb spec/   >>>>>>>
Muito mais rápido agora. Tudo funcionando.
<<<<<<
vi .rspec    >>>>>>>>  Fazendo o rspec usar o spork by default.
--color
--drb
<<<<<<<<<
time rspec spec/    >>>>>>>  Funcionando!

>>>>> Agora mantenho 2 janelas terminal abertas, uma com spork e outra com autotest.


>>>>>>>>>  Fazendo um test que vai falhar.
vi spec/controllers/pages_controller_spec.rb    >>>>>>>>>
# O render_views, faz testar as views e não só os controllers.
describe PagesController do
  render_views

  describe "GET 'about'" do
    it "should be successful" do
      get 'about'
      response.should be_success
    end
  end
end
<<<<<<
>>>>>>>>>>>>>  OBS:
Importante notar que ao modificar views, precisa-se 'tocar' no controller para causar o autotest.
É preciso abrir o arquivo do controller e salvá-lo novamente.
<<<<<<<<<<<<<

>>>
Editei page_controller.rb para incluir def about.
Editei routes.rb para incluir get "pages/about"
Editei about.html.erb para incluir uma view simples.
<<<
Browser localhost:3000/pages/about

>>>>>>>>>>>>>>>>>>> Alterando os Titulos

>>>>
Page      URL             Base Title   Variable Title
=======================================================
Home     /pages/home      Sample App      | Home
Contact  /pages/contact   Sample App      | Contact
About    /pages/about     Sample App      | About
<<<<

vi pages_controler_spec.rb
vi application.html.erb

git add .     >>>>>>> Tudo ok. Git neles
git commit -m "Done with static pages"

git checkout master              >>> Mudando para o master branch
git merge static-pages           >>> Fazendo o merge do static-pages para o master branch
git push                         >>> Manda pro GitHub

>>>>>>> Copiei o blueprint CSS/blueprint/ para o public/stylesheets



***** Chapter 5 agora - Trabalhando no Layout

git checkout -b filling-in-layout     >>>> Criando um branch

>>>> Acrescentei uma estrutura básica no html do layout
>>>> Acrescentei os css's e passei parte da estrutura para partials.

>>>>> Hora dos Integration Tests  (requests specs)
rails generate integration_test layout_links

>>>> Escrevi os integrations tests no arquivo geram, apareceram os erros.
vi spec/requests/layout_links_spec.rb  >>>>>>>>>>> Um Exemplo:
  it "should have a Home page at '/'" do
    get '/'
    response.should have_selector('title', :content => 'Home')
  end
<<<<<<<<

>>> O tutotial indica o que fazer caso o autotest não execute os Integration Tests, no meu caso funcionou.

vi routes.rb  >>>>>>>>>>>>>
  match '/contact', :to => 'pages#contact'
  match '/about',   :to => 'pages#about'
  match '/help',    :to => 'pages#help'
  
  root :to => 'pages#home'
<<<<<<<<<<<

git rm public/index.html
git commit -m "Removed default Rails page"

>>>>>> Alterei os links nos layouts (header, footer, etc). Usando sempre o link_to e apontando para os atalhos criados (contact_path, about_path, root_path, etc)

>>>> Criando o Sign up
rails generate controller Users new
rm -rf spec/views
rm -rf spec/helpers

vi users_controller_spec.rb



*****===> 2011/08/04

>>> Criando o Signup.
vi users_controller_spec.rb >>>>>>>>> Criando o Spec do Signup
	it "should have the right title" do
	  get 'new'
	  response.should have_selector("title", :content => "Sign up")
	end
<<<<<<<<  RED
vi users_controller.rb  >>>>>>>>
  def new
    @title = "Sign up"
  end
<<<<<<<<  GREEN
vi layout_links_spec.rb   >>>>>>>> Criando o Integration Test
describe "LayoutLinks" do
  it "should have a signup page at '/signup'" do
    get '/signup'
    response.should have_selector('title', :content => "Sign up")
  end
end
<<<<<<<  RED
vi routes.rb     >>>>>>>>>>   Acrescentando a rota para o signup
  match '/signup',  :to => 'users#new'
<<<<<<<<<<  GREEN
vi pages/home.html.erb    >>>>>> Adicionando o link para o signup.
<%= link_to "Sign up now!", signup_path, :class => "signup_button round" %>
<<<<<<<<<<
>>>>>>>> Fazendo o commit e o merge no git.
rspec spec/          >>>>  GREEN
git add .
git commit -m "Finished layout and routes"
git checkout master
git merge filling-in-layout
git push       >>>> GitHub

git checkout -b exercises_5_5    >>>>>>>  Criando um Branch para os Exerc√≠cios (5.5) do tutorial

vi _header.html.erb     >>>>>  tirei a defini√ß√£o da logo (img)
vi application_helper.rb   >>>>>>
  def logo
    image_tag("logo.png", :alt => "Sample App", :class => "round")
  end
<<<<<
vi layout_links_spec.rb    >>>>>> Tests dos links.
  it "should have the right links on the layout" do
    visit root_path
    click_link "About"
    response.should have_selector('title', :content => "About")
    click_link "Help"
    response.should have_selector('title', :content => "Help")
    click_link "Contact"
    response.should have_selector('title', :content => "Contact")
    click_link "Home"
    response.should have_selector('title', :content => "Home")
    click_link "Sign up now!"
    response.should have_selector('title', :content => "Sign up")
  end
<<<<<<<   GREEN

rspec spec/     >>>> GREEN
git add .
git commit -m "Terminados os Exercicios (5.5) do tutorial. criando helper pra logo e testando os links das p√°ginas"
git checkout master
git merge exercises_5_5
git push     >>>> GitHub


>>>>>>>  Capitulo 6. - Modeling and viewing users, part I
git checkout master
git checkout -b modeling-users    >>> Criando o Branch

rails generate model User name:string email:string
rake db:migrate

vi Gemfile    >>>>>>  Adicionando o GEM Annotate -> Annotates Models
group :development do
  gem 'annotate', '>= 2.4.0'
end
<<<<<<
bundle install

>>>>>  No meu caso, o comando 'annotate' deu um problema. rodei 'gem update' (sem --system), mas nao funcionou, vou ficar com o comando do tutorial mesmo, por enquanto.
bundle exec annotate --position before     >>> Executando o annotate.

vi user.rb    >>>>>>  Definindo os atributos acess√≠veis ao usu√°rio.
  attr_accessible :name, :email
<<<<<

bundle exec rake db:test:prepare     >>>> Garantindo que o db de test está atualizado.

vi user.rb    >>> Escrevendo o validation 
  # validates :name, :presence => true
<<<
vi user_spec.rb   >>> Escrevendo o test para a validação, deixando o test do name como pending
describe User do
  #pending "add some examples to (or delete) #{__FILE__}"
  
  before(:each) do
    @attr = { :name => 'Example User', :email => 'user@example.com' }
  end

  it "should create a new instance given valid attributes" do
    User.create!(@attr)
  end

  it "should require a name"

end
<<<  1 PENDING

vi user_spec.rb    >>>> Escrevendo o test da validação agora.
  it "should require a name" do
    no_name_user = User.new( @attr.merge(:name => '') )
    no_name_user.should_not be_valid
  end
<<<<<   RED

vi user_spec.rb   >>>> Escrevi um test equivalente para o email.
vi user.rb   >>> Escrevendo a validação
   validates :name, :presence => true
   validates :email, :presence => true
<<<   GREEN

vi user_spec.rb  >>>> Test de validação do tamanho do nome
  it "should reject names that are too long" do
    long_name = 'a' * 51
    long_name_user = User.new( @attr.merge(:name => long_name) )
    long_name_user.should_not be_valid
  end
<<<<  RED
vi user.rb  >>>> Fiz a validação do tamanho do campo
<<<<  GREEN
vi user_spec.rb  >>>> Fiz o Teste da validação do email
<<<<  RED
vi user.rb  >>>> Fiz a validação do email
<<<<  GREEN
>>>>  Fiz os teste para garantir uniqueness no email. (case sensitive - 2 testes)
<<< RED
>>>>  Fiz a validação de uniqueness do email.
<<< GREEN



*****===> 2011/08/05

>>>>>  Alterando o DB para garantir o Uniqueness
rails generate migration add_email_uniqueness_index
rake db:migrate

vi application_html.erb    >>>> Incluindo Informações de Debug no Layout
    <%= debug(params) if Rails.env.development? %>
<<<<
>>>>>>>>>  Inclui um cliente de exemplo.
vi users_controller.rb   >>>>>>  Incluindo o metodo show.
  def show
    @user = User.find( params[:id] )
  end
<<<<<<<
vi show.html.erb       >>>>>>  Incluindo a view para mostrar o cliente.
<<<<<
vi routes.rb      >>>>>>   Acrescentando REST para users.
  resources :users   #> Retirar get 'users/new'
<<<<<<

git add .
git commit -m "Finished first cut of the User model"

